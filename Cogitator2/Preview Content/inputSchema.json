{
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "title": "Detail",
            "type": "array"
          }
        },
        "title": "HTTPValidationError",
        "type": "object"
      },
      "Input": {
        "properties": {
          "apply_watermark": {
            "default": true,
            "description": "Applies a watermark to enable determining if an image is generated in downstream applications. If you have other provisions for generating or deploying images safely, you can use this to disable watermarking.",
            "title": "Apply Watermark",
            "type": "boolean",
            "x-order": 15
          },
          "guidance_scale": {
            "default": 7.5,
            "description": "Scale for classifier-free guidance",
            "maximum": 50,
            "minimum": 1,
            "title": "Guidance Scale",
            "type": "number",
            "x-order": 9
          },
          "height": {
            "default": 1024,
            "description": "Height of output image",
            "title": "Height",
            "type": "integer",
            "x-order": 5
          },
          "high_noise_frac": {
            "default": 0.8,
            "description": "For expert_ensemble_refiner, the fraction of noise to use",
            "maximum": 1,
            "minimum": 0,
            "title": "High Noise Frac",
            "type": "number",
            "x-order": 13
          },
          "image": {
            "description": "Input image for img2img or inpaint mode",
            "format": "uri",
            "title": "Image",
            "type": "string",
            "x-order": 2
          },
          "lora_scale": {
            "default": 0.6,
            "description": "LoRA additive scale. Only applicable on trained models.",
            "maximum": 1,
            "minimum": 0,
            "title": "Lora Scale",
            "type": "number",
            "x-order": 16
          },
          "mask": {
            "description": "Input mask for inpaint mode. Black areas will be preserved, white areas will be inpainted.",
            "format": "uri",
            "title": "Mask",
            "type": "string",
            "x-order": 3
          },
          "negative_prompt": {
            "default": "",
            "description": "Input Negative Prompt",
            "title": "Negative Prompt",
            "type": "string",
            "x-order": 1
          },
          "num_inference_steps": {
            "default": 50,
            "description": "Number of denoising steps",
            "maximum": 500,
            "minimum": 1,
            "title": "Num Inference Steps",
            "type": "integer",
            "x-order": 8
          },
          "num_outputs": {
            "default": 1,
            "description": "Number of images to output.",
            "maximum": 4,
            "minimum": 1,
            "title": "Num Outputs",
            "type": "integer",
            "x-order": 6
          },
          "prompt": {
            "default": "An astronaut riding a rainbow unicorn",
            "description": "Input prompt",
            "title": "Prompt",
            "type": "string",
            "x-order": 0
          },
          "prompt_strength": {
            "default": 0.8,
            "description": "Prompt strength when using img2img / inpaint. 1.0 corresponds to full destruction of information in image",
            "maximum": 1,
            "minimum": 0,
            "title": "Prompt Strength",
            "type": "number",
            "x-order": 10
          },
          "refine": {
            "allOf": [
              {
                "$ref": "#/components/schemas/refine"
              }
            ],
            "default": "no_refiner",
            "description": "Which refine style to use",
            "x-order": 12
          },
          "refine_steps": {
            "description": "For base_image_refiner, the number of steps to refine, defaults to num_inference_steps",
            "title": "Refine Steps",
            "type": "integer",
            "x-order": 14
          },
          "replicate_weights": {
            "description": "Replicate LoRA weights to use. Leave blank to use the default weights.",
            "title": "Replicate Weights",
            "type": "string",
            "x-order": 17
          },
          "scheduler": {
            "allOf": [
              {
                "$ref": "#/components/schemas/scheduler"
              }
            ],
            "default": "K_EULER",
            "description": "scheduler",
            "x-order": 7
          },
          "seed": {
            "description": "Random seed. Leave blank to randomize the seed",
            "title": "Seed",
            "type": "integer",
            "x-order": 11
          },
          "width": {
            "default": 1024,
            "description": "Width of output image",
            "title": "Width",
            "type": "integer",
            "x-order": 4
          }
        },
        "title": "Input",
        "type": "object"
      },
      "Output": {
        "items": {
          "format": "uri",
          "type": "string"
        },
        "title": "Output",
        "type": "array"
      },
      "PredictionRequest": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "input": {
            "$ref": "#/components/schemas/Input"
          },
          "output_file_prefix": {
            "title": "Output File Prefix",
            "type": "string"
          },
          "webhook": {
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "title": "Webhook",
            "type": "string"
          },
          "webhook_events_filter": {
            "default": [
              "start",
              "output",
              "logs",
              "completed"
            ],
            "items": {
              "$ref": "#/components/schemas/WebhookEvent"
            },
            "type": "array"
          }
        },
        "title": "PredictionRequest",
        "type": "object"
      },
      "PredictionResponse": {
        "properties": {
          "completed_at": {
            "format": "date-time",
            "title": "Completed At",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "error": {
            "title": "Error",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "input": {
            "$ref": "#/components/schemas/Input"
          },
          "logs": {
            "default": "",
            "title": "Logs",
            "type": "string"
          },
          "metrics": {
            "title": "Metrics",
            "type": "object"
          },
          "output": {
            "$ref": "#/components/schemas/Output"
          },
          "started_at": {
            "format": "date-time",
            "title": "Started At",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "version": {
            "title": "Version",
            "type": "string"
          }
        },
        "title": "PredictionResponse",
        "type": "object"
      },
      "Status": {
        "description": "An enumeration.",
        "enum": [
          "starting",
          "processing",
          "succeeded",
          "canceled",
          "failed"
        ],
        "title": "Status",
        "type": "string"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "title": "Location",
            "type": "array"
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        },
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError",
        "type": "object"
      },
      "WebhookEvent": {
        "description": "An enumeration.",
        "enum": [
          "start",
          "output",
          "logs",
          "completed"
        ],
        "title": "WebhookEvent",
        "type": "string"
      },
      "refine": {
        "description": "An enumeration.",
        "enum": [
          "no_refiner",
          "expert_ensemble_refiner",
          "base_image_refiner"
        ],
        "title": "refine",
        "type": "string"
      },
      "scheduler": {
        "description": "An enumeration.",
        "enum": [
          "DDIM",
          "DPMSolverMultistep",
          "HeunDiscrete",
          "KarrasDPM",
          "K_EULER_ANCESTRAL",
          "K_EULER",
          "PNDM"
        ],
        "title": "scheduler",
        "type": "string"
      }
    }
  },
  "info": {
    "title": "Cog",
    "version": "0.1.0"
  },
  "openapi": "3.0.2",
  "paths": {
    "/": {
      "get": {
        "operationId": "root__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Root  Get"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Root"
      }
    },
    "/health-check": {
      "get": {
        "operationId": "healthcheck_health_check_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Healthcheck Health Check Get"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Healthcheck"
      }
    },
    "/predictions": {
      "post": {
        "description": "Run a single prediction on the model",
        "operationId": "predict_predictions_post",
        "parameters": [
          {
            "in": "header",
            "name": "prefer",
            "required": false,
            "schema": {
              "title": "Prefer",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PredictionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PredictionResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Predict"
      }
    },
    "/predictions/{prediction_id}": {
      "put": {
        "description": "Run a single prediction on the model (idempotent creation).",
        "operationId": "predict_idempotent_predictions__prediction_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "prediction_id",
            "required": true,
            "schema": {
              "title": "Prediction ID",
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "prefer",
            "required": false,
            "schema": {
              "title": "Prefer",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PredictionRequest"
                  }
                ],
                "title": "Prediction Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PredictionResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Predict Idempotent"
      }
    },
    "/predictions/{prediction_id}/cancel": {
      "post": {
        "description": "Cancel a running prediction",
        "operationId": "cancel_predictions__prediction_id__cancel_post",
        "parameters": [
          {
            "in": "path",
            "name": "prediction_id",
            "required": true,
            "schema": {
              "title": "Prediction ID",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Cancel Predictions  Prediction Id  Cancel Post"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Cancel"
      }
    },
    "/shutdown": {
      "post": {
        "operationId": "start_shutdown_shutdown_post",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Start Shutdown Shutdown Post"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Start Shutdown"
      }
    }
  }
}
